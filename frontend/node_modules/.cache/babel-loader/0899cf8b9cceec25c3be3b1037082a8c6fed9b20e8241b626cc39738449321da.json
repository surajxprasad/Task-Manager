{"ast":null,"code":"import { API_URL } from \"./utils\";\nexport const CreateTask = async taskObj => {\n  const url = `${API_URL}/tasks`;\n  console.log('url ', url);\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(taskObj)\n  };\n  try {\n    const result = await fetch(url, options);\n    const data = await result.json();\n    return data;\n  } catch (err) {\n    return err;\n  }\n};\n_c = CreateTask;\nexport const GetAllTasks = async () => {\n  const url = `${API_URL}/tasks`;\n  console.log('url ', url);\n  const options = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  try {\n    const result = await fetch(url, options);\n    const data = await result.json();\n    return data;\n  } catch (err) {\n    return err;\n  }\n};\n_c2 = GetAllTasks;\nexport const DeleteTaskById = async id => {\n  const url = `${API_URL}/tasks/${id}`;\n  console.log('url ', url);\n  const options = {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  try {\n    const result = await fetch(url, options);\n    const data = await result.json();\n    return data;\n  } catch (err) {\n    return err;\n  }\n};\n_c3 = DeleteTaskById;\nexport const UpdateTaskById = async (id, reqBody) => {\n  const url = `${API_URL}/tasks/${id}`;\n  console.log('url ', url);\n  const options = {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(reqBody)\n  };\n  try {\n    const result = await fetch(url, options);\n    const data = await result.json();\n    return data;\n  } catch (err) {\n    return err;\n  }\n};\n_c4 = UpdateTaskById;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"CreateTask\");\n$RefreshReg$(_c2, \"GetAllTasks\");\n$RefreshReg$(_c3, \"DeleteTaskById\");\n$RefreshReg$(_c4, \"UpdateTaskById\");","map":{"version":3,"names":["API_URL","CreateTask","taskObj","url","console","log","options","method","headers","body","JSON","stringify","result","fetch","data","json","err","_c","GetAllTasks","_c2","DeleteTaskById","id","_c3","UpdateTaskById","reqBody","_c4","$RefreshReg$"],"sources":["/Users/surajprasad/Downloads/Task-Manager/frontend/src/api.js"],"sourcesContent":["import { API_URL } from \"./utils\"\n\n\nexport const CreateTask = async (taskObj) => {\n    const url = `${API_URL}/tasks`;\n    console.log('url ', url)\n    const options = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(taskObj)\n    };\n    try {\n        const result = await fetch(url, options);\n        const data = await result.json();\n        return data;\n    } catch (err) {\n        return err;\n    }\n}\nexport const GetAllTasks = async () => {\n    const url = `${API_URL}/tasks`;\n    console.log('url ', url)\n    const options = {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n    try {\n        const result = await fetch(url, options);\n        const data = await result.json();\n        return data;\n    } catch (err) {\n        return err;\n    }\n}\n\nexport const DeleteTaskById = async (id) => {\n    const url = `${API_URL}/tasks/${id}`;\n    console.log('url ', url)\n    const options = {\n        method: 'DELETE',\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n    try {\n        const result = await fetch(url, options);\n        const data = await result.json();\n        return data;\n    } catch (err) {\n        return err;\n    }\n}\n\n\nexport const UpdateTaskById = async (id, reqBody) => {\n    const url = `${API_URL}/tasks/${id}`;\n    console.log('url ', url)\n    const options = {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(reqBody)\n    };\n    try {\n        const result = await fetch(url, options);\n        const data = await result.json();\n        return data;\n    } catch (err) {\n        return err;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}